3. 指令译码单元设计
3.1 RISC-V指令译码
3.1.1 指令与微操作
    在X86架构中，原始的指令成为Macro-operations。RISC-V指令架构借鉴了该设计方法，将部分较为特殊的指令分解为微操作(语句有点不通。。)。
在本设计中，将译码出一条微操作的指令划分为Single类型。两条：double型，包括部分跳转指令、Load、Store指令和浮点指令。三条及以上微操
作划分为Multi，包括部分原子指令集的指令。Fence类型指令作为特殊译码指令译码。
3.1.2 压缩指令
    常规RISC-V指令的长度为32位，固定长度的指令简化了处理器译码单元的设计。但同时固定32位的指令也会造成代码体积的变大。


3.2 译码单元结构
3.2.1 整体架构
    本文所涉及的超标量乱序发射RISC-V处理器中，译码部分设计采用分组并行译码器，即数据和控制通路分离设计，同时生成流水线控制信号和数据信号，
再通过选择器来选择数据通路应该传递到下一级的指令，这减少了单个流水级的组合逻辑的延时，可以提高主频。
    相应的，译码级需设计具备同时译码四条指令的带宽。本设计使用四组译码器的设计，对应完成取指流水级传递过来的最多四条指令。每一条指令的译码
都由一组译码器来完成，再根据指令类型选出正确的指令译码信息。四组译码器采用非对称的架构设计，第一组译码器设计为能够译码Single、Double、
Multi类型指令，称其为Complex Decoder。
    
